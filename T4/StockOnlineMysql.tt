<#@ template language="C#" hostspecific="True"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>

<#@ assembly name="$(SolutionDir)\packages\MySql.Data.6.9.12\lib\net40\MySql.Data.dll"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>

<#@include file="MultipleOutputHelper.txt"#>
<#@ output extension=".txt" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
// Code generated by a template
using System;
using Azeroth.Nalu;
namespace T4
{
<# manager.EndBlock(); #>
 
<# manager.StartFooter(); #>
    }
}
// It's the end
<# manager.EndBlock(); #>

<#
	//System.Diagnostics.Debugger.Launch();//---进入调试
	      string configPath=Host.ResolveAssemblyReference("$(ProjectDir)")+"app.config";
	  var configPathMap=new System.Configuration.ExeConfigurationFileMap(){ExeConfigFilename=configPath};
    var appConfig=System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configPathMap, System.Configuration.ConfigurationUserLevel.None);
    var connSection= appConfig.GetSection("connectionStrings") as System.Configuration.ConnectionStringsSection;  

	string cnnstr= connSection.ConnectionStrings["mysqlmaster"].ConnectionString;
				string catalog=cnnstr.Split(new char[] { ';','='},StringSplitOptions.RemoveEmptyEntries).Select(x=>x.ToLower()).SkipWhile(x=>x!= "initial catalog").ToArray()[1];
				string cmdstr=string.Format(@"select *
                                                            from INFORMATION_SCHEMA.TABLES
                                                            where TABLE_TYPE='BASE TABLE' and table_schema='{0}'", catalog);
				Dictionary<string,string> lstTableName=new Dictionary<string,string>();
	         using(var cnn=new MySql.Data.MySqlClient.MySqlConnection(cnnstr))
				{
								cnn.Open();
								var cmd2= cnn.CreateCommand();
								cmd2.CommandText=cmdstr;
		using(var reader=cmd2.ExecuteReader())
								{
while(reader.Read())
	lstTableName.Add(reader["TABLE_NAME"].ToString(),reader["TABLE_COMMENT"].ToString());
}

	cmd2.Dispose();
			foreach(KeyValuePair<string,string> kv in lstTableName)
				{
							

manager.StartNewFile(kv.Key+".cs");


			string cmdstrForColDescription= string.Format(@"show full fields from {0}", kv.Key);
  this.WriteLine(string.Format("{0}/// <summary>",new String(' ',4)));
												this.WriteLine(string.Format("{0}/// {1}",new String(' ',4),kv.Value));
			  this.WriteLine(string.Format("{0}/// <summary>",new String(' ',4)));
    this.WriteLine(string.Format("{1}public class {0}",kv.Key,new String(' ',4)));
    this.WriteLine(new String(' ',4)+"{");
    List<string> lstEnum=new List<string>();
     
  using (var cmd = cnn.CreateCommand())
                {
                    cmd.CommandText = "select * from "+kv.Key;
                    var rr=cmd.ExecuteReader();
                    DataTable table = rr.GetSchemaTable();
                    rr.Close();
                    cmd.CommandText=cmdstrForColDescription;
                    using(var adapater=new MySql.Data.MySqlClient.MySqlDataAdapter(cmd))
                    {
                        DataTable tableDesp=new DataTable();
                        adapater.Fill(tableDesp);
                        foreach (DataRow row in table.Rows)
                        {
                            string colName = row["ColumnName"].ToString();
                            if(colName.EndsWith("Enum"))
                                  lstEnum.Add(colName.Substring(0,colName.Length-4)+"s");
                            string colType = row["DataType"].ToString().Substring(7);
							bool allowDBNull=Convert.ToBoolean(row["AllowDBNull"]);
                            if(allowDBNull && !colType.Equals("String")&& !colType.Equals("Byte[]"))
                                    colType="Nullable<"+colType+">";
                            this.WriteLine(string.Format("{3}/// <summary>",colType,colName,"{set;get;}",new String(' ',8)));
                            this.WriteLine(string.Format("{3}///{4}",colType,colName,"{set;get;}",new String(' ',8),tableDesp.Select("Field='"+colName+"'")[0]["Comment"].ToString().Replace("\r\n"," ").Replace("\n"," ").Replace("\n"," ")));
                            this.WriteLine(string.Format("{3}/// </summary>",colType,colName,"{set;get;}",new String(' ',8)));
							if(allowDBNull && colType.Equals("String") &&!colName.EndsWith("Enum"))
							         this.WriteLine(string.Format("{2}[XString({0},{1})]",((int)row["ColumnSize"])<=0?int.MaxValue:row["ColumnSize"],allowDBNull.ToString().ToLower(),new String(' ',8)));
                            if(colType.Equals("String") &&colName.EndsWith("Enum"))
							         this.WriteLine(string.Format("{2}[XStringMapEnum]",row["ColumnSize"],allowDBNull.ToString().ToLower(),new String(' ',8)));
							this.WriteLine(string.Format("{3}public {0} {1} {2}",colName.EndsWith("Enum")?lstEnum[lstEnum.Count-1]:colType,colName,"{set;get;}",new String(' ',8)));
                        }
                    }
                }
			//foreach(string name in lstEnum)
    //{
        //this.WriteLine(string.Empty);
        //this.WriteLine(string.Format("{0}public partial enum {1}",new String(' ',8),name));
        //this.WriteLine(new String(' ',8)+"{");
        //this.WriteLine(new String(' ',8)+"");
        //this.WriteLine(new String(' ',8)+"}");
    //}





manager.EndBlock();




}

}
			






 #>
<# manager.Process(true); #> 